/*
use std::ops::BitAnd;

struct U256
{
    v: [u64; 4]
}

struct U512
{
    v: [U256; 2]
}

impl BitAnd for U256
{
    type Output = U256;

    fn bitand(self, _rhs: U256) -> U256
    {
        return U256{ v:[ self.v[0] & _rhs.v[0],
                       self.v[1] & _rhs.v[1],
                       self.v[2] & _rhs.v[2],
                       self.v[3] & _rhs.v[3] ] };
    }
}
*/

/*
struct U256
{
    v : [u64; 4]
}

struct U512
{
    v : [U256; 2]
}
*/

/*

#[derive(Copy)]
struct U256(u64,u64,u64,u64);

impl BitAnd for U256
{
    type Output = U256;

    fn bitand(self, _rhs: U256) -> U256
    {
       return U256( self.0 & _rhs.0,
                    self.1 & _rhs.1,
                    self.2 & _rhs.2,
                    self.3 & _rhs.3 );
    }
}

impl num::traits::PrimInt for U256
{
    fn count_ones(self) -> u32
    {
        return self.0.count_ones() + self.1.count_ones() + self.2.count_ones() + self.3.count_ones();
    }
}

struct SBTreeNode
{
    value: U256, // The actual set bits at this node
    mask: U256, // Which bits have pointers in the map
    children: Vec<SBTreeNode>,
}
*/

/*
fn fetch_an_integer() -> redis::RedisResult<isize> {
    // connect to redis
    let client = try!(redis::Client::open("redis://127.0.0.1/"));
    let con = try!(client.get_connection());
    // throw away the result, just make sure it does not fail
    let _ : () = try!(con.set("my_key", 42));
    // read back the key and return it.  Because the return value
    // from the function is a result for integer this will automatically
    // convert into one.
    return con.get("my_key");
}
*/

/* Not allowed on stable release channel

#![feature(fs_walk)]

            for path in walk_dir(&arg).unwrap() {
                println!("{}", path.unwrap().path().display());
            }

*/

    //for (track_id, arg) in env::args().skip(1).enumerate() {
    /*
    let x:isize = fetch_an_integer().unwrap(); //fetch_an_integer().unwrap_or(0isize);
    println!( "hello {}", x );
    */
/*
    println!("Sorting tracks by size..");
    let tracks : Vec<String> = redis::cmd("KEYS").arg("track-tags-*").query(conn).unwrap();
    let mut tracks_counts : Vec<(&str, usize)> = time!( "fetch", tracks.iter().map( |t| { let c:usize = conn.scard(&t as &str).unwrap(); (t as &str, c) } ).collect() );
    time!( "sort", tracks_counts.sort_by(|a,b| b.1.cmp(&a.1)) ); // sort descending
    let top_n : Vec<&str> = tracks_counts.iter().take(n).map(|f| f.0).collect();
    let top_n_keys : Vec<usize> = top_n.iter().map( |t| t.split("-").nth(2).unwrap().parse().unwrap() ).collect();
    println!("Copying {} sets to judy", top_n.len());
    let mut judy = JudyBitset::new();
    // for track in top_n doesn't work because we use top_n later. TODO: understand why
    for &track in top_n.iter() {
        let track_num : usize = track.split("-").nth(2).unwrap().parse().unwrap();
        let members : Vec<usize> = conn.smembers(track).unwrap();
        judy.add( "track-tags", track_num, &members ).unwrap();
    }

    let tags : Vec<usize> = time!( "union track-tags", judy.union("track-tags", &top_n_keys).unwrap() );
    println!("Got {} tags", tags.len() );
    let tag_names : Vec<String> = tags.iter().map( |t| format!("tag-tracks-{}", t) ).collect();

    println!("Copying {} sets to judy", tags.len() );
    for (tag, &num) in tag_names.iter().zip(&tags) {
        let members : Vec<usize> = conn.smembers(tag as &str).unwrap();
        judy.add("tag-tracks", num, &members).unwrap();
    }

    let tracks : Vec<usize> = time!( "union tag-tracks", judy.union("tag-tracks", &tags).unwrap() );
    println!("Got {} tracks", tracks.len() );
    let track_names : Vec<String> = tracks.iter().map( |t| format!("track-tags-{}", t) ).collect();

    println!("Copying {} sets to judy", tracks.len() );
    for (track, &num) in track_names.iter().zip(&tracks) {
        let members : Vec<usize> = conn.smembers(track as &str).unwrap();
        judy.add("track-tags", num, &members).unwrap();
    }

    let final_tags : Vec<usize> = time!( "inter track-tags", judy.intersect("track-tags", &tracks).unwrap() );
    println!("Final tags:");
    for tag in final_tags {
        println!("{}", tag);
    }
}
*/
